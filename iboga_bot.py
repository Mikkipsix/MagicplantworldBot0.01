import os
import gspread
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from oauth2client.service_account import ServiceAccountCredentials

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("google_credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key("1HnYbGB2Mdv5Dczol8slVShPJUIJXaoj9QLu2k0wx354").sheet1

user_data = {}
questions = [
    "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
    "–ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã?",
    "–°–∫–æ–ª—å–∫–æ –ò–±–æ–≥–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?",
    "–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–∫–æ—Ä–∞, –ø–æ—Ä–æ—à–æ–∫, —ç–∫—Å—Ç—Ä–∞–∫—Ç)?",
    "–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å?",
    "–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram)?"
]

@dp.message_handler(commands=['start', 'order'])
async def start(message: types.Message):
    user_data[message.chat.id] = {"step": 0, "answers": []}
    await message.answer("ü§≤ –ó–∞–∫–∞–∑ –ò–±–æ–≥–∏\n\n" + questions[0])

@dp.message_handler()
async def process_answer(message: types.Message):
    if message.chat.id not in user_data:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ /order, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.")
        return

    data = user_data[message.chat.id]
    step = data["step"]
    data["answers"].append(message.text)
    step += 1

    if step < len(questions):
        data["step"] = step
        await message.answer(questions[step])
    else:
        sheet.append_row(data["answers"])
        del user_data[message.chat.id]
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
        await message.answer("""üí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:

üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É (–¢-–±–∞–Ω–∫, –†–æ—Å—Å–∏—è):
4377 7237 4092 3911

üåç USDT (TRC20):
TSSamReVeLf9FWrPmoJUdrinV7Nh9y7Bjv

üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã —Å—é–¥–∞.
""")

@dp.message_handler(content_types=types.ContentType.PHOTO | types.ContentType.DOCUMENT)
async def handle_payment_proof(message: types.Message):
    try:
        await bot.forward_message("@Grishatimo", from_chat_id=message.chat.id, message_id=message.message_id)
        await message.answer("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –ú—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –∑–∞–∫–∞–∑ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ:", e)

if __name__ == "__main__":
    executor.start_polling(dp)
